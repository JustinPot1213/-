<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="第三章 管道符、重定向与环境变量 1、输入输出重定向 输入重定向是指把文件导入到命令中，而输出重定向则是指把原本要输出到 屏幕的数据信息写入到指定文件中。又将输出重定向分为了标准输出重定向和错误输出重" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>第三章 管道符、重定向与环境变量 - trafalgar999 - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=-oFz8B4m7JhHaZzdTkzPza2oLZNDRR8obnCz6w7OHbU" />
    
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/trafalgar999/custom.css?v=5caRPcLLuEw8MsXLL9A/oeL203E=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/SimpleMemory/bundle-SimpleMemory-mobile.min.css" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/trafalgar999/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/trafalgar999/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/trafalgar999/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=z6JkvKQ7L_bGD-nwJExYzsoFf5qnluqZJru6RsfoZuM"></script>
    <script>
        var currentBlogId = 597237;
        var currentBlogApp = 'trafalgar999';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'SimpleMemory';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/trafalgar999/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/trafalgar999/">trafalgar999</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/trafalgar999/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/trafalgar999">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/trafalgar999/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
6&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
0</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/trafalgar999/p/12768404.html">第三章 管道符、重定向与环境变量</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <h1 id="第三章-管道符、重定向与环境变量">第三章 管道符、重定向与环境变量</h1>
<h3 id="1、输入输出重定向">1、输入输出重定向</h3>
<blockquote>
<p>输入重定向是指把文件导入到命令中，而输出重定向则是指把原本要输出到 屏幕的数据信息写入到指定文件中。又将输出重定向分为了标准输出重定向和错误输出重定向两种 不同的技术，以及清空写入与追加写入两种模式。</p>
</blockquote>
<ul>
<li>标准输入重定向（STDIN，文件描述符为 0）：默认从键盘输入，也可从其他文件或命 令中输入。</li>
<li>标准输出重定向（STDOUT，文件描述符为 1）：默认输出到屏幕。</li>
<li>错误输出重定向（STDERR，文件描述符为 2）：默认输出到屏幕。<br>
比如我们分别查看两个文件的属性信息，其中第二个文件是不存在的，虽然针对这两个 文件的操作都分别会在屏幕上输出一些数据信息，但这两个操作的差异其实很大</li>
</ul>
<pre><code>touch file1.txt
ll file1.txt    查看存在的文件--输出正确信息
ll ffffff.ff    查看不存在的文件--输出错误提示信息
</code></pre>
<p><strong>输入重定向中用到的符号及其作用:</strong></p>
<table>
<thead>
<tr>
<th>符号</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>命令 &lt; 文件</td>
<td>命令 &lt; 文件</td>
</tr>
<tr>
<td>命令 &lt;&lt; 分界符</td>
<td>从标准输入中读入，直到遇见分界符才停止</td>
</tr>
<tr>
<td>命令 &lt; 文件 1 &gt; 文件 2</td>
<td>将文件 1 作为命令的标准输入并将标准输出到文件 2</td>
</tr>
</tbody>
</table>
<p><strong>对于输出重定向来讲，用到的符号及其作用如表 3-2 所示:</strong></p>
<table>
<thead>
<tr>
<th>符号</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>命令 &gt; 文件</td>
<td>将标准输出重定向到一个文件中（清空原有文件的数据）</td>
</tr>
<tr>
<td>命令 2&gt; 文件</td>
<td>将错误输出重定向到一个文件中（清空原有文件的数据）</td>
</tr>
<tr>
<td>命令 &gt;&gt; 文件</td>
<td>将标准输出重定向到一个文件中（追加到原有内容的后面）</td>
</tr>
<tr>
<td>命令 2&gt;&gt; 文件</td>
<td>将错误输出重定向到一个文件中（追加到原有内容的后面）</td>
</tr>
<tr>
<td>命令 &gt;&gt; 文件 2&gt;&amp;1  或 命令 &amp;&gt;&gt; 文件</td>
<td>将标准输出与错误输出共同写入到文件中（追加到原有内容的 后面）</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注：对于重定向中的标准输出模式，可以省略文件描述符 1 不写，而错误输出模式的文件描述符 2 是必须要写的。</p>
</blockquote>
<pre><code>man bash &gt; readme.txt 
</code></pre>
<p><em>用输入重定向为C文件提供参数</em></p>
<pre><code class="language-C">#include&lt;stdio.h&gt;

int main(void){
    char c ='';
    c = getchar();
    printf(&quot;%c&quot;, c);
    return 0;
}
</code></pre>
<pre><code>gcc test.c
./ a.out
输入：f
输出：f
</code></pre>
<p><em>把 readme.txt 文件导入给 wc -l 命令，统计一 下文件中的内容行数</em></p>
<pre><code>wc -l &lt; readme.tx
</code></pre>
<h3 id="2、管道命令符">2、管道命令符</h3>
<blockquote>
<p>同时 按下键盘上的 Shift+\键即可输入管道符，其执行格式为“命令 A | 命令 B”。命令符的作用也 可以用一句话来概括“把前一个命令原本要输出到屏幕的数据当作是后一个命令的标准输 入</p>
</blockquote>
<pre><code>grep &quot;/sbin/nologin&quot; /etc/passwd | wc -l 

ls -l /etc/ | more 
</code></pre>
<p><em>在修改用户密码时，通常都需要输入两次密码以进行确认，这在编写自动化脚本时将成为一个非常致命的缺陷。通过把管道符和 passwd 命令的--stdin 参数相结合，我们可以用一条 命令来完成密码重置操作:</em></p>
<pre><code>echo &quot;linuxprobe&quot; | passwd --stdin root 
</code></pre>
<p><em>在发送电子 邮件时，默认采用交互式的方式来进行</em></p>
<pre><code>mail -s &quot;Readme&quot; root@linuxprobe.com &lt;&lt; over 
</code></pre>
<h3 id="3、命令行的通配符">3、命令行的通配符</h3>
<blockquote>
<p>如果就记得一个文件的开头几个字母，想遍 历查找出所有以这个关键词开头的文件，该怎么操作呢？</p>
</blockquote>
<p><em>比如，假设想要批量查看所有硬 盘文件的相关权限属性，一种方式是这样的:</em></p>
<p>星号（*）代 表匹配零个或多个字符，问号（?）代表匹配单个字符，中括号内加上数字[0-9]代表匹配 0～9 之间的单个数字的字符，而中括号内加上字母[abc]则是代表匹配 a、b、c 三个字符中的任意 一个字符</p>
<pre><code>ls -l /dev/sda* 
ls -l /dev/sda? 
ls -l /dev/sda[0-9]
</code></pre>
<h3 id="4、常用的转义字符">4、常用的转义字符</h3>
<blockquote>
<p>4 个常用的转义字符如下所示</p>
</blockquote>
<ul>
<li>反斜杠（\）：使反斜杠后面的一个变量变为单纯的字符串。</li>
<li>单引号（''）：转义其中所有的变量为单纯的字符串。</li>
<li>双引号（&quot;&quot;）：保留其中的变量属性，不进行转义处理。</li>
<li>反引号（``）：把其中的命令执行后返回结果</li>
</ul>
<h3 id="5、重要的环境变量">5、重要的环境变量</h3>
<blockquote>
<p>Linux 系统中的环境变量是用来定义系统运行环境的一些参数，比如每个用户不同的家目录、邮件 存放位置等。</p>
</blockquote>
<p><strong>在用 户执行了一条命令之后，Linux 系统中到底发生了什么事情呢？简单来说，命令在 Linux 中的 执行分为 4 个步骤.</strong></p>
<ol>
<li>判断用户是否以绝对路径或相对路径的方式输入命令（如/bin/ls），如果是的话 则直接执行。</li>
<li>Linux 系统检查用户输入的命令是否为“别名命令”，即用一个自定义的命令名称来替换原本的命令名称。</li>
<li>Bash 解释器判断用户输入的是内部命令还是外部命令。内部命令是解释器内部 的指令，会被直接执行；而用户在绝大部分时间输入的是外部命令，这些命令交由步骤 4 继 续处理。</li>
<li>系统在多个路径中查找用户输入的命令文件，而定义这些路径的变量叫作 PATH，可 以简单地把它理解成是“解释器的小助手”，作用是告诉 Bash 解释器待执行的命令可能存放 的位置，然后 Bash 解释器就会乖乖地在这些位置中逐个查找</li>
</ol>
<p><em>PATH 是由多个路径值组成的 变量，每个路径值之间用冒号间隔，对这些路径的增加和删除操作将影响到 Bash 解释器对 Linux 命令的查找</em></p>
<pre><code>echo $PATH 
</code></pre>
<p>**其实变量是由固定的变量名与用户或系统设置的变量值两部分组成的，我们完全可以自 行创建变量，来满足工作需求。例如设置一个名称为 WORKDIR 的变量，方便用户更轻松地 进入一个层次较深的目录： **</p>
<pre><code>mkdir /home/workdir 
WORKDIR=/home/workdir 
cd $WORKDIR 
pwd
</code></pre>
<p><strong>但是，这样的变量不具有全局性，作用范围也有限，默认情况下不能被其他用户使用。 如果工作需要，可以使用 export 命令将其提升为全局变量，这样其他用户也就可以使用它了：</strong></p>
<pre><code>export WORKDIR 
</code></pre>
<hr>
<blockquote>
<p>感谢刘遄老师提供的开源优秀教材《Linux就该这么学》www.linuxprobe.com</p>
</blockquote>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-04-24 16:38</span>&nbsp;
<a href="https://www.cnblogs.com/trafalgar999/">trafalgar999</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12768404" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12768404);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 597237, cb_blogApp = 'trafalgar999', cb_blogUserGuid = 'cf6c0599-7199-498c-1fd6-08d7e0b363fc';
    var cb_entryId = 12768404, cb_entryCreatedDate = '2020-04-24 16:38', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 trafalgar999
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>